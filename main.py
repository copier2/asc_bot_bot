import asyncio

from aiogram import F
from aiogram.types import Message

from config import config


@config.dp.message(F.text == '/start')
async def cmd_start(message: Message):
    await message.answer(
        f'–ü—Ä–∏–≤–µ—Ç {message.from_user.first_name}, —è —Ç–≤–æ–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫'
    )


@config.dp.message()
async def get_text_bd(message: Message):
    brand_keys = message.text
    try:
        # –ü–æ–∏—Å–∫ id –±—Ä–µ–Ω–¥–∞ –ø–æ –≤–≤–µ–¥–µ–Ω–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É
        brand_select_query = f"""SELECT * FROM asclist_brand WHERE title='{brand_keys}';"""
        config.cursor.execute(brand_select_query)
        brand_records = config.cursor.fetchone()
        id_brands = brand_records[0]
        flag_cd_brand = brand_records[2]
        print(f'–î–ª—è –∑–∞–ø—Ä–æ—Å–∞ "{brand_keys}" —Å id "{id_brands}:"')

        # –ü–æ–∏—Å–∫ –∑–∞–ø–∏—Å–µ–π –≤ —Å–ø–∏—Å–∫–µ –ê–°–¶ –ø–æ id –±—Ä–µ–Ω–¥–∞
        asclist_select_query = f"""SELECT * FROM asclist_asclist WHERE brand_id='{id_brands}';"""
        config.cursor.execute(asclist_select_query)
        asclist_records = config.cursor.fetchall()
        print(f'–Ω–∞–π–¥–µ–Ω–æ {len(asclist_records)} –∑–∞–ø–∏—Å—å(–∏): {asclist_records}')

        # –í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ê–°–¶
        for asc in range(len(asclist_records)):
            list_id = asclist_records[asc][1]
            asc_select_query = f"""SELECT * FROM asclist_asc WHERE id='{list_id}';"""
            config.cursor.execute(asc_select_query)
            asc_records = config.cursor.fetchone()
            print(f'{asc_records}')

            cg_brand = asclist_records[asc][3]
            cg_brand_query = f"""SELECT * FROM asclist_commoditygroup WHERE id='{cg_brand}';"""
            config.cursor.execute(cg_brand_query)
            cg_brand_records = config.cursor.fetchone()
            print(f'{cg_brand_records}')
            if flag_cd_brand:
                await message.answer(
                    f'–ü–æ –¥–∞–Ω–Ω–æ–º—É –±—Ä–µ–Ω–¥—É –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–∞ –∫—É—Ä—å–µ—Ä—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞!\n\n'
                    f'üì± –ì—Ä—É–ø–ø–∞ —Ç–æ–≤–∞—Ä–æ–≤: {cg_brand_records[1]}\n'
                    f'üíº –ù–∞–∑–≤–∞–Ω–∏–µ –ê–°–¶: {asc_records[1]}\n'
                    f'üè¢ –ì–æ—Ä–æ–¥: {asc_records[4]}\n'
                    f'üì© –≠–ª.–ø–æ—á—Ç–∞: {asc_records[5]}\n'
                )
            else:
                await message.answer(
                    f'üì± –ì—Ä—É–ø–ø–∞ —Ç–æ–≤–∞—Ä–æ–≤: {cg_brand_records[1]}\n'
                    f'üíº –ù–∞–∑–≤–∞–Ω–∏–µ –ê–°–¶: {asc_records[1]}\n'
                    f'üè¢ –ê–¥—Ä–µ—Å: {asc_records[3]}\n'
                    f'üìû –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {asc_records[2]}\n'
                )

    except Exception as _ex:
        print('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã')
        await message.answer(
            f'–ü–æ –±—Ä–µ–Ω–¥—É "{brand_keys}" - –∑–∞–ø–∏—Å–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
        )
    finally:
        if config.sql_connection:
            print('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ')


async def main():
    await config.dp.start_polling(config.bot)

if __name__ == '__main__':
    asyncio.run(main())
