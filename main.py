import asyncio

from aiogram import F
from aiogram.types import Message

from config import config


@config.DP.message(F.text == '/start')
async def cmd_start(message: Message):
    """–°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –∫–æ–º–∞–Ω–¥—ã /start"""
    await message.answer(
        f'–ü—Ä–∏–≤–µ—Ç {message.from_user.first_name}, —è —Ç–≤–æ–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫'
    )


@config.DP.message(F.text == '/about')
async def cmd_about(message: Message):
    await message.answer(
        f'<b>–ë–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –ê–°–¶ –ø–æ –±—Ä–µ–Ω–¥—É</b>\n\n'
        f'<i>–ü—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏ –ú-–í–∏–¥–µ–æ/–≠–ª—å–¥–æ—Ä–∞–¥–æ</i>\n\n'
        f'–ë–î —Å–æ–¥–µ—Ä–∂–∏—Ç:\n'
        f'<b>{config.BRAND_COUNT_RECORDS}</b> –±—Ä–µ–Ω–¥(–æ–≤)\n'
        f'{config.ASC_COUNT_RECORDS} –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–π –ê–°–¶: \n\n'
        f'–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ë–î –ø–æ –ê–°–¶: <b>{config.UPDATE_DATE_BD}</b>\n'
        f'–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è –±–æ—Ç–∞: <b>{config.BOT_VERSION}</b>\n',
        parse_mode='HTML'
    )


@config.DP.message()
async def get_text_bd(message: Message):
    brand_keys = message.text
    try:
        # –ü–æ–∏—Å–∫ id –±—Ä–µ–Ω–¥–∞ –ø–æ –≤–≤–µ–¥–µ–Ω–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É
        brand_select_query = f"""SELECT * FROM asclist_brand WHERE title='{brand_keys}';"""
        config.CURSOR.execute(brand_select_query)
        brand_records = config.CURSOR.fetchone()
        id_brands = brand_records[0]
        flag_cd_brand = brand_records[2]
        print(f'–î–ª—è –∑–∞–ø—Ä–æ—Å–∞ "{brand_keys}" —Å id "{id_brands}:"')

        # –ü–æ–∏—Å–∫ –∑–∞–ø–∏—Å–µ–π –≤ —Å–ø–∏—Å–∫–µ –ê–°–¶ –ø–æ id –±—Ä–µ–Ω–¥–∞
        asclist_select_query = f"""SELECT * FROM asclist_asclist WHERE brand_id='{id_brands}';"""
        config.CURSOR.execute(asclist_select_query)
        asclist_records = config.CURSOR.fetchall()
        print(f'–Ω–∞–π–¥–µ–Ω–æ {len(asclist_records)} –∑–∞–ø–∏—Å—å(–∏): {asclist_records}')

        # –í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ê–°–¶
        for asc in range(len(asclist_records)):
            list_id = asclist_records[asc][1]
            asc_select_query = f"""SELECT * FROM asclist_asc WHERE id='{list_id}';"""
            config.CURSOR.execute(asc_select_query)
            asc_records = config.CURSOR.fetchone()
            print(f'{asc_records}')

            cg_brand = asclist_records[asc][3]
            cg_brand_query = f"""SELECT * FROM asclist_commoditygroup WHERE id='{cg_brand}';"""
            config.CURSOR.execute(cg_brand_query)
            cg_brand_records = config.CURSOR.fetchone()
            print(f'{cg_brand_records}')
            if flag_cd_brand:
                await message.answer(
                    f'<b>{asc_records[1]}</b>\n\n'
                    f'<i>–ü–æ –¥–∞–Ω–Ω–æ–º—É –±—Ä–µ–Ω–¥—É –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–∞ –∫—É—Ä—å–µ—Ä—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞!</i>\n\n'
                    f'–ì—Ä—É–ø–ø–∞ —Ç–æ–≤–∞—Ä–æ–≤: {cg_brand_records[1]}\n\n'
                    f'üè¢ –ê–¥—Ä–µ—Å: {asc_records[3]}\n'
                    f'‚òéÔ∏è –¢–µ–ª–µ—Ñ–æ–Ω: {asc_records[2]}\n'
                    f'üì® E-mail: {asc_records[5]}\n'
                    f'üñ• –°–∞–π—Ç: {asc_records[6]}\n',
                    parse_mode='HTML'
                )
            else:
                await message.answer(
                    f'<b>{asc_records[1]}</b>\n\n'
                    f'–ì—Ä—É–ø–ø–∞ —Ç–æ–≤–∞—Ä–æ–≤: {cg_brand_records[1]}\n\n'
                    f'üè¢ –ê–¥—Ä–µ—Å: {asc_records[3]}\n'
                    f'‚òéÔ∏è –¢–µ–ª–µ—Ñ–æ–Ω: {asc_records[2]}\n'
                    f'üì® E-mail: {asc_records[5]}\n'
                    f'üñ• –°–∞–π—Ç: {asc_records[6]}\n',
                    parse_mode='HTML'
                )

    except Exception as _ex:
        print('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã')
        await message.answer(
            f'–ü–æ –±—Ä–µ–Ω–¥—É "{brand_keys}" - –∑–∞–ø–∏—Å–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
        )
    finally:
        if config.SQL_CONNECTION:
            print('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ')


async def main():
    await config.DP.start_polling(config.BOT)

if __name__ == '__main__':
    asyncio.run(main())
